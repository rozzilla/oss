"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[34051],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),c=r,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||i;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},80663:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const i={},l="Configuration",o={unversionedId:"reference/configuration",id:"version-0.0.17/reference/configuration",title:"Configuration",description:"File support",source:"@site/versioned_docs/version-0.0.17/reference/configuration.md",sourceDirName:"reference",slug:"/reference/configuration",permalink:"/docs/0.0.17/reference/configuration",draft:!1,tags:[],version:"0.0.17",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Platformatic CLI",permalink:"/docs/0.0.17/reference/cli"},next:{title:"Auth",permalink:"/docs/0.0.17/reference/db-authorization/intro"}},p={},s=[{value:"File support",id:"file-support",level:2},{value:"Format",id:"format",level:2},{value:"<code>authorization</code>",id:"authorization",level:3},{value:"<code>core</code>",id:"core",level:3},{value:"<code>dashboard</code>",id:"dashboard",level:3},{value:"<code>metrics</code>",id:"metrics",level:3},{value:"<code>migrations</code>",id:"migrations",level:3},{value:"<code>plugin</code>",id:"plugin",level:3},{value:"<code>server</code>",id:"server",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Environment Variables Whitelist",id:"environment-variables-whitelist",level:3}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("h2",{id:"file-support"},"File support"),(0,r.kt)("p",null,"Platformatic DB supports JSON, JSON5, YAML and TOML file format. The format will be inferred by file extension (for YAML, both ",(0,r.kt)("inlineCode",{parentName:"p"},".yml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml")," extension are supported)."),(0,r.kt)("p",null,"We'll use JSON format in the following examples."),(0,r.kt)("h2",{id:"format"},"Format"),(0,r.kt)("p",null,"Following root object's properties are supported"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#authorization"},(0,r.kt)("inlineCode",{parentName:"a"},"authorization"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#core"},(0,r.kt)("inlineCode",{parentName:"a"},"core"))," (",(0,r.kt)("strong",{parentName:"li"},"required"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dashboard"},(0,r.kt)("inlineCode",{parentName:"a"},"dashboard"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#metrics"},(0,r.kt)("inlineCode",{parentName:"a"},"metrics"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#migrations"},(0,r.kt)("inlineCode",{parentName:"a"},"migrations"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#plugin"},(0,r.kt)("inlineCode",{parentName:"a"},"plugin"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#server"},(0,r.kt)("inlineCode",{parentName:"a"},"server"))," (",(0,r.kt)("strong",{parentName:"li"},"required"),")")),(0,r.kt)("h3",{id:"authorization"},(0,r.kt)("inlineCode",{parentName:"h3"},"authorization")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"adminSecret")," (string): if defined, it will be the password used to access the dashboard and the string to send within the ",(0,r.kt)("inlineCode",{parentName:"p"},"x-platformatic-admin-secret")," header when performing GraphQL/REST API calls.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"rules")," (array): authorization rules that describe which CRUD action every user can/can't perform. "),(0,r.kt)("p",{parentName:"li"},"The format of this array is TBD."))),(0,r.kt)("h3",{id:"core"},(0,r.kt)("inlineCode",{parentName:"h3"},"core")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"connectionString")," (string) (",(0,r.kt)("strong",{parentName:"p"},"required"),"): This is the connection string used to connect to the database (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"postgres://user:password@my-database:5432/db-name"),"). "),(0,r.kt)("p",{parentName:"li"},"Platformatic DB supports Mysql/MariaDB, Postgresql and SQLite.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"graphql")," (boolean or object): enables the GraphQL support"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Examples")),(0,r.kt)("p",{parentName:"li"},"Enables GraphQL support"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "core": {\n    ...\n    "graphql": true \n  }\n}\n')),(0,r.kt)("p",{parentName:"li"},"Enables GraphQL support with GraphiQL"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "core": {\n    ...\n    "graphql": {\n      "graphiql": true\n    }\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"openapi")," (boolean or object): enables OpenAPI REST support. If the value is an object, all ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/specification/"},"OpenAPI v3")," properties can be detailed. "),(0,r.kt)("p",{parentName:"li"},"Platformatic DB uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-swagger"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/swagger"))," under the hood to manage this configuration."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Examples")),(0,r.kt)("p",{parentName:"li"},"Enables OpenAPI"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "core": {\n    ...\n    "openapi": true \n  }\n}\n')),(0,r.kt)("p",{parentName:"li"},"Enables OpenAPI with options"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "core": {\n    ...\n    "openapi": {\n      "info": {\n        "title": "Platformatic DB",\n        "description": "Exposing a SQL database as REST"\n      }\n    }\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ignore")," (object): key/value object that define which tables should be ignored, meaning they are not entities."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Examples")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "core": {\n    ...\n    "ignore": {\n      "versions": true // "versions" table will be not mapped with GraphQL/REST APIs\n    }\n  }\n}\n')))),(0,r.kt)("h3",{id:"dashboard"},(0,r.kt)("inlineCode",{parentName:"h3"},"dashboard")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rootPath")," (boolean): Whether the dashboard will be available at ",(0,r.kt)("inlineCode",{parentName:"li"},"/")," location. Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),". ")),(0,r.kt)("h3",{id:"metrics"},(0,r.kt)("inlineCode",{parentName:"h3"},"metrics")),(0,r.kt)("p",null,"  Configuration for a ",(0,r.kt)("a",{parentName:"p",href:"https://prometheus.io/"},"Prometheus")," server that will export monitoring metrics for the current server instance. It uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SkeLLLa/fastify-metrics"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify-metrics"))," under the hodd."),(0,r.kt)("p",null,"  It can be a boolean or an object. If value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," this server will listen to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://0.0.0.0:9090")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hostname")," (string): The hostname where Prometheus server will listen for connections."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"port")," (number): The port where Prometheus server will listen for connections."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"auth")," (object): Basic Auth configuration. ",(0,r.kt)("inlineCode",{parentName:"li"},"username")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"password")," are required here.")),(0,r.kt)("h3",{id:"migrations"},(0,r.kt)("inlineCode",{parentName:"h3"},"migrations")),(0,r.kt)("p",null,"  Configures ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rickbergfalk/postgrator"},"Postgrator")," to run migrations over the database."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dir")," (string) (",(0,r.kt)("strong",{parentName:"li"},"required"),"): Relative path to the migrations directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"autoApply")," (boolean): Whether to automatically apply migrations when running the migrate command. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"true"))),(0,r.kt)("h3",{id:"plugin"},(0,r.kt)("inlineCode",{parentName:"h3"},"plugin")),(0,r.kt)("p",null,"  Defines a plugin that will be loaded with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcollina/fastify-isolate"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify-isolate")),"."),(0,r.kt)("p",null,"  It is an object and all properties will be passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify-isolate")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," (string) (",(0,r.kt)("strong",{parentName:"li"},"required"),"): Relative path to plugin's entry point.")),(0,r.kt)("h3",{id:"server"},(0,r.kt)("inlineCode",{parentName:"h3"},"server")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"hostname")," (string) (",(0,r.kt)("strong",{parentName:"p"},"required"),"): The hostname where Platformatic DB server will listen for connections.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"port")," (number) (",(0,r.kt)("strong",{parentName:"p"},"required"),"): The port where Platformatic DB server will listen for connections.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"healthCheck")," (boolean or object): Enables the Health Check. Powered by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/under-pressure"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/under-pressure")),".\nThe value can be an object, used to specify the interval between checks (default 5000ms)"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "server": {\n    ...\n    "healthCheck": {\n      "interval": 2000\n    }\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"cors")," (object): the value of this property will be passed to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-cors"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/cors"))," so all keys documented there are supported."))),(0,r.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"Each value can be replaced by an environment variable."),(0,r.kt)("p",null,"To avoid messing/exposing system's variables, only ",(0,r.kt)("inlineCode",{parentName:"p"},"PLT_")," prefixed ones will be replaced."),(0,r.kt)("p",null,"All placeholders must be replaced."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "core": {\n    "connectionString": "{PLT_CONNECTION_STRING}"\n  },\n  "server": {\n    "port": "{MY_PORT}"\n  }\n}\n')),(0,r.kt)("p",null,"Platformatic will look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"PLT_CONNECTION_STRING")," environment variable and will replace it in the config."),(0,r.kt)("p",null,"Anyway it will throw an error because it can't replace ",(0,r.kt)("inlineCode",{parentName:"p"},"{PORT}")," because it's not prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"PLT_"),". The error message will suggest to use ",(0,r.kt)("inlineCode",{parentName:"p"},"PLT_PORT")," instead."),(0,r.kt)("p",null,"Variables can be set via terminal (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"PLT_PORT=4321 npx platformatic db --config db.json"),") or via a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file (loaded by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/motdotla/dotenv"},(0,r.kt)("inlineCode",{parentName:"a"},"dotenv")),").\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file can be located in the same folder of the config file or in the current working directory."),(0,r.kt)("h3",{id:"environment-variables-whitelist"},"Environment Variables Whitelist"),(0,r.kt)("p",null,"Users can override default behavior, and use variables that are not prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"PLT_"),", using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-env")," argument."),(0,r.kt)("p",null,"The value is a comma separated list of strings. ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-env=PORT,HOST")," will allow ",(0,r.kt)("inlineCode",{parentName:"p"},"{PORT}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"{HOST}")," in the config file."),(0,r.kt)("p",null,"Default variables already supported are: ",(0,r.kt)("inlineCode",{parentName:"p"},"PORT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE_URL"),". If the user pass ",(0,r.kt)("inlineCode",{parentName:"p"},"--allow-env")," argument, it will replace the default list."))}u.isMDXComponent=!0}}]);