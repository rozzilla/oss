"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[11155],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},62993:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:1},o="Introduction",s={unversionedId:"reference/db-authorization/intro",id:"version-0.0.21/reference/db-authorization/intro",title:"Introduction",description:"Authorization in Platformatic DB is role-based (see Roles And User Information for further details).",source:"@site/versioned_docs/version-0.0.21/reference/db-authorization/intro.md",sourceDirName:"reference/db-authorization",slug:"/reference/db-authorization/intro",permalink:"/docs/0.0.21/reference/db-authorization/intro",draft:!1,tags:[],version:"0.0.21",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/0.0.21/reference/configuration"},next:{title:"Programmatic Rules",permalink:"/docs/0.0.21/reference/db-authorization/programmatic-rules"}},l={},p=[{value:"JWT",id:"jwt",level:2},{value:"Webhook",id:"webhook",level:2},{value:"HTTP Headers",id:"http-headers",level:2},{value:"Impersonation",id:"impersonation",level:3},{value:"User Metadata",id:"user-metadata",level:2}],c={toc:p};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Authorization in Platformatic DB is ",(0,r.kt)("strong",{parentName:"p"},"role-based")," (see ",(0,r.kt)("a",{parentName:"p",href:"#roles-and-user-information"},"Roles And User Information")," for further details).\nA user is supposed to have a list of roles associated.",(0,r.kt)("br",{parentName:"p"}),"\n","Platformatic delegates authentication and assignment of the ",(0,r.kt)("inlineCode",{parentName:"p"},"roles")," to an external ",(0,r.kt)("em",{parentName:"p"},"authentication service"),".\nThe job of the authentication service is to authenticate users and assign their roles correctly.",(0,r.kt)("br",{parentName:"p"}),"\n","Supported authentication service integrations are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"JWT"),(0,r.kt)("li",{parentName:"ul"},"Webhook")),(0,r.kt)("p",null,"We refer to the user roles and other informations (like ",(0,r.kt)("inlineCode",{parentName:"p"},"userId"),") as ",(0,r.kt)("a",{parentName:"p",href:"#user-metadata"},"User Metadata"),"."),(0,r.kt)("p",null,"To make testing and developing easier, it's possible to bypass these checks if a ",(0,r.kt)("inlineCode",{parentName:"p"},"adminSecret")," is set. See ",(0,r.kt)("a",{parentName:"p",href:"#http-headers"},"HTTP Headers"),".\x13"),(0,r.kt)("h2",{id:"jwt"},"JWT"),(0,r.kt)("p",null,"JWT is built on top of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-jwt"},"fastify-jwt"),".  "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Platformatic DB JWT integration",src:n(79295).Z,width:"513",height:"274"})),(0,r.kt)("p",null,"To configure it, the simplest way is to pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"secret"),", e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'  "authorization": {\n    ...\n\n    "jwt": {\n      "secret": "<shared-secret>"\n    },\n    \n    ...\n  }\n')),(0,r.kt)("p",null,"For more complex configurations, please check ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-jwt#options"},"fastify-jwt options"),". "),(0,r.kt)("h2",{id:"webhook"},"Webhook"),(0,r.kt)("p",null,"Platformatic can use a webhook to authenticate the requests. "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Platformatic DB Webhook integration",src:n(87688).Z,width:"606",height:"324"})),(0,r.kt)("p",null,"In this case, the URL is configured on authorization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'  "authorization": {\n    ...\n\n    "webhook": {\n      "url": "<webhook url>"\n    },\n    \n    ...\n  }\n')),(0,r.kt)("p",null,"When a request is received, Platformatic sends a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," to the webhook, replicating the same body and headers, except for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"host")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connection"))),(0,r.kt)("p",null,"In the Webhook case, the HTTP response contains the roles/user information as HTTP headers. "),(0,r.kt)("h2",{id:"http-headers"},"HTTP Headers"),(0,r.kt)("p",null,"To make testing and developing easier, it's possible to bypass JWT / WebHook integration if a ",(0,r.kt)("inlineCode",{parentName:"p"},"adminSecret")," is set.\nIf so, and if a request has ",(0,r.kt)("inlineCode",{parentName:"p"},"X-PLATFORMATIC-ADMIN-SECRET")," HTTP header set with the configured ",(0,r.kt)("inlineCode",{parentName:"p"},"adminSecret"),", the JWT/Webhook authentication is skipped, and\nthe role set automatically as ",(0,r.kt)("inlineCode",{parentName:"p"},"platformatic-admin"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Platformatic DB JWT integration",src:n(69880).Z,width:"472",height:"310"})),(0,r.kt)("p",null,"Note that setting user roles on HTTP headers is highly insecure and should be used only within protected networks."),(0,r.kt)("h3",{id:"impersonation"},"Impersonation"),(0,r.kt)("p",null,"If a user is recognized with a ",(0,r.kt)("inlineCode",{parentName:"p"},"platformatic-admin")," role, can also ",(0,r.kt)("strong",{parentName:"p"},"impersonate users"),".\x13\nThe users/roles to impersonate are specified by:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X-PLATFORMATIC-USER-ID"),": the ",(0,r.kt)("inlineCode",{parentName:"li"},"userId")," of the authenticated user. Note that this key value is conventional, any key can be used as long that is the same key specified in authorization rules."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"X-PLATFORMATIC-ROLE"),": comma separated list of roles ")),(0,r.kt)("h2",{id:"user-metadata"},"User Metadata"),(0,r.kt)("p",null,"In all cases, the roles/user information is passed to Platformatic from the external ",(0,r.kt)("em",{parentName:"p"},"authentication service")," as a string (JWT claims or HTTP headers).\nWe can refer to these as ",(0,r.kt)("strong",{parentName:"p"},"user metadata"),". Platformatic saves the user metadata for each request in a ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," object.\nRoles can be set using ",(0,r.kt)("inlineCode",{parentName:"p"},"X-PLATFORMATIC-ROLE")," as list of comma-separated roles (this key is configurable, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/0.0.21/reference/configuration#role-and-anonymous-keys"},"References"),")."),(0,r.kt)("p",null,'Note that roles are simply strings, but some "special roles" are reserved:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"platformatic-admin")," : this identifies a user who has admin powers"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"anonymous"),": set automatically when no roles are associated")))}u.isMDXComponent=!0},69880:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/http-16e850f4929a4d5c21a629cbe609b67e.png"},79295:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/jwt-f72781533567349fb71fc37b9768e847.png"},87688:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/webhook-35d01c3e23ac75c26c9d519daa16cf1b.png"}}]);