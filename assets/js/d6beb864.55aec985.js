"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[14792],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,k=d["".concat(p,".").concat(u)]||d[u]||c[u]||l;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},41098:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={},i="Deployment",o={unversionedId:"how-to/deployment",id:"version-0.0.17/how-to/deployment",title:"Deployment",description:"Requirements:",source:"@site/versioned_docs/version-0.0.17/how-to/deployment.md",sourceDirName:"how-to",slug:"/how-to/deployment",permalink:"/docs/0.0.17/how-to/deployment",draft:!1,tags:[],version:"0.0.17",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adding custom functionality",permalink:"/docs/0.0.17/how-to/custom-functionality"},next:{title:"Integration testing",permalink:"/docs/0.0.17/how-to/integration-testing"}},p={},s=[{value:"On Fly.io",id:"on-flyio",level:2},{value:"With sqlite",id:"with-sqlite",level:3},{value:"Adding <code>sqlite</code> for debugging",id:"adding-sqlite-for-debugging",level:4},{value:"Adding Litestream and S3 for backups",id:"adding-litestream-and-s3-for-backups",level:4}],m={toc:s};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deployment"},"Deployment"),(0,r.kt)("p",null,"Requirements:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Dockerfile with access to ",(0,r.kt)("inlineCode",{parentName:"li"},"platformatic")," CLI"),(0,r.kt)("li",{parentName:"ol"},"A fly.io account"),(0,r.kt)("li",{parentName:"ol"},"A platformatic app that works locally")),(0,r.kt)("h2",{id:"on-flyio"},"On Fly.io"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Need a fly.io account and the CLI tool: ",(0,r.kt)("a",{parentName:"p",href:"https://fly.io/docs/hands-on/"},"https://fly.io/docs/hands-on/"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to your project on your local machine")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a ",(0,r.kt)("strong",{parentName:"p"},"Dockerfile"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM platformatic/platformatic:latest\n\nUSER root\n\nWORKDIR /opt/<app-name>\nCOPY migrations migrations\nCOPY db.json db.json\n\nEXPOSE 3042\n\nCMD ["platformatic", "db"]\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create an app on fly: ",(0,r.kt)("inlineCode",{parentName:"p"},"fly launch --no-deploy --generate-name --org personal --region mad")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"or just ",(0,r.kt)("inlineCode",{parentName:"li"},"fly launch")," and follow the prompts"),(0,r.kt)("li",{parentName:"ul"},"if there is no database at this point, ",(0,r.kt)("inlineCode",{parentName:"li"},"--no-deploy")," can be removed"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Expose the correct port, matching ",(0,r.kt)("strong",{parentName:"p"},"db.json")," and ",(0,r.kt)("strong",{parentName:"p"},"Dockerfile"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'[[services]]\n  http_checks = []\n- internal_port = 8080\n+ internal_port = 3042\n  processes = ["app"]\n  protocol = "tcp"\n  script_checks = []\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now deploy: ",(0,r.kt)("inlineCode",{parentName:"p"},"fly deploy")))),(0,r.kt)("h3",{id:"with-sqlite"},"With sqlite"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Follow steps above, skipping deployment until the end"),(0,r.kt)("li",{parentName:"ol"},"Create a volume for database storage: ",(0,r.kt)("inlineCode",{parentName:"li"},"fly volumes create data"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"will create storage in the same region as application"),(0,r.kt)("li",{parentName:"ul"},"defaults to 3GB size, use ",(0,r.kt)("inlineCode",{parentName:"li"},"-s")," to change: ",(0,r.kt)("inlineCode",{parentName:"li"},"-s 10")," is 10GB"))),(0,r.kt)("li",{parentName:"ol"},"Update mount in ",(0,r.kt)("strong",{parentName:"li"},"fly.toml"),", replacing ",(0,r.kt)("inlineCode",{parentName:"li"},"<app-name>"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[mounts]\n  source = "data"\n  destination = "/opt/<app-name>/.platformatic/data"\n'))),(0,r.kt)("li",{parentName:"ol"},"Create directory in project, this will be where the sqlite database goes:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir -p .platformatic/data\ntouch .platformatic/data/.gitkeep\n"))),(0,r.kt)("li",{parentName:"ol"},"Make sure sqlite databases are ignored to avoid inconsistencies in\ndeployment:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'echo "*.db" >> .gitignore\n'))),(0,r.kt)("li",{parentName:"ol"},"Update connection string to the sqlite database, replacing ",(0,r.kt)("inlineCode",{parentName:"li"},"<app-name>"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "core": {\n    "connectionString": "sqlite://.platformatic/data/<app-name>.db"\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ol"},"Add migrations folder, migrations, and configuration. ",(0,r.kt)("em",{parentName:"li"},"Note")," app will not run\nif there is a migrations folder and no migrations.",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Create folder and simple migration if not already available:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'mkdir migrations\necho "CREATE TABLE demo (id uuid PRIMARY KEY);" > migrations/001.do.sql\n'))),(0,r.kt)("li",{parentName:"ol"},"Update configuration:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "migrations": {\n    "dir": "./migrations"\n  }\n}\n'))))),(0,r.kt)("li",{parentName:"ol"},"Optionally, ",(0,r.kt)("a",{parentName:"li",href:"#adding-sqlite-for-debugging"},"add ",(0,r.kt)("inlineCode",{parentName:"a"},"sqlite")," to the ",(0,r.kt)("strong",{parentName:"a"},"Dockerfile")," to help with debugging")),(0,r.kt)("li",{parentName:"ol"},"Deploy the app ",(0,r.kt)("inlineCode",{parentName:"li"},"fly deploy"))),(0,r.kt)("h4",{id:"adding-sqlite-for-debugging"},"Adding ",(0,r.kt)("inlineCode",{parentName:"h4"},"sqlite")," for debugging"),(0,r.kt)("p",null,"Create a script for launching the database, call it ",(0,r.kt)("strong",{parentName:"p"},"db-cli.sh"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"#!/bin/sh\nset -x\n# DSN will be defined in the Dockerfile\nsqlite3 $DSN\n")),(0,r.kt)("p",null,"Add the following snippet to the ",(0,r.kt)("strong",{parentName:"p"},"Dockerfile"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},'# Setup sqlite viewer\n# Replace <app-name> with your app name\nRUN apk add sqlite\nENV DSN "/opt/<app-name>/.platformatic/data/demo.db"\nCOPY db-cli.sh /usr/local/bin/db-cli\nRUN chmod +x /usr/local/bin/db-cli\n')),(0,r.kt)("p",null,"With fly.io, it becomes easy to boot directly into the database by running the\nfollowing command from the local machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"fly ssh console -C db-cli\n")),(0,r.kt)("h4",{id:"adding-litestream-and-s3-for-backups"},"Adding Litestream and S3 for backups"),(0,r.kt)("p",null,"This requires an AWS account and the appropriate setup in AWS. Follow the\n",(0,r.kt)("a",{parentName:"p",href:"https://litestream.io/guides/s3/"},"Litestream guide for configuring an AWS user")," and then come back here to\nintegrate with Platformatic and Fly."),(0,r.kt)("p",null,"Once AWS is setup, store the credentials on Fly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"fly secrets set \\\n  AWS_ACCESS_KEY_ID=some-access-key \\\n  AWS_SECRET_ACCESS_KEY=some-access-secret\n")),(0,r.kt)("p",null,"Update ",(0,r.kt)("strong",{parentName:"p"},"fly.toml")," with the bucket name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[env]\n  AWS_BACKUP_BUCKET = "bucket-name"\n')),(0,r.kt)("p",null,"Configuration of Litestream will be done through the standard yaml file, create\na ",(0,r.kt)("strong",{parentName:"p"},"litestream.yml")," file in the project with the following contents:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"dbs:\n  # make sure to replace <app-name>\n  - path: /opt/<app-name>/.platformatic/data/<app-name>.db\n    replicas:\n      - url: s3://${AWS_BACKUP_BUCKET}\n        access-key-id: ${AWS_ACCESS_KEY_ID}\n        secret-access-key: ${AWS_SECRET_ACCESS_KEY}\n")),(0,r.kt)("p",null,"To get automatic database replication and restoration, a small Bash script is\nused as the ",(0,r.kt)("strong",{parentName:"p"},"Dockerfile")," ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'#!/bin/bash\n\nif [ ! -f "$DSN" ]\nthen\n    echo "Restoring database"\n    litestream restore -v "$DSN"\nfi\n\n# TODO change <app-name>\necho "Starting Litestream & application"\nlitestream replicate -exec "platformatic db --config /opt/<app-name>/db.json"\n')),(0,r.kt)("p",null,"Finally, the existing Dockerfile needs a number of changes. Start with the\nLitestream base image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},"FROM litestream/litestream:0.3.9 AS litestream\n\nFROM registry.fly.io/platformatic-private:latest\n")),(0,r.kt)("p",null,"Copy Litestream into the platformatic image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},"USER root\nCOPY --from=litestream /usr/local/bin/litestream /usr/local/bin/litestream\n")),(0,r.kt)("p",null,"Copy the runner and configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},"COPY run.sh /run.sh\nCOPY litestream.yml /etc/litestream.yml\n")),(0,r.kt)("p",null,"Last of all, run from ",(0,r.kt)("strong",{parentName:"p"},"run.sh"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},"CMD /run.sh\n")),(0,r.kt)("p",null,"With Litestream and the database tools, the final image should look something\nlike this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM litestream/litestream:0.3.9 AS litestream\n\nFROM registry.fly.io/platformatic-private:latest\n\nUSER root\nCOPY --from=litestream /usr/local/bin/litestream /usr/local/bin/litestream\n\nRUN apk add sqlite bash ca-certificates curl\n\n# Set environment variables.\nENV DSN "/opt/<app-name>/.platformatic/data/<app-name>.db"\nCOPY image/db-cli /usr/local/bin/db-cli\nRUN chmod +x /usr/local/bin/db-cli\n\nEXPOSE 3042\n\nADD litestream.yml /etc/litestream.yml\nADD run.sh /run.sh\n\n# Application specific files\nWORKDIR /opt/<app-name>\nCOPY migrations migrations\nCOPY db.json db.json\n\nCMD /run.sh\n')))}c.isMDXComponent=!0}}]);