"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[40400],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67580:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:5},o="Relations",l={unversionedId:"reference/sql-mapper/entity/relations",id:"version-0.0.17/reference/sql-mapper/entity/relations",title:"Relations",description:"When Platformatic DB is reading your database schema, it will pick up also relations between tables and put those info into a relations field in the entity object.",source:"@site/versioned_docs/version-0.0.17/reference/sql-mapper/entity/relations.md",sourceDirName:"reference/sql-mapper/entity",slug:"/reference/sql-mapper/entity/relations",permalink:"/docs/0.0.17/reference/sql-mapper/entity/relations",draft:!1,tags:[],version:"0.0.17",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/docs/0.0.17/reference/sql-mapper/entity/hooks"},next:{title:"Platformatic CLI",permalink:"/docs/0.0.17/reference/cli"}},s={},c=[{value:"Example",id:"example",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"relations"},"Relations"),(0,a.kt)("p",null,"When Platformatic DB is reading your database schema, it will pick up also relations between tables and put those info into a ",(0,a.kt)("inlineCode",{parentName:"p"},"relations")," field in the entity object."),(0,a.kt)("p",null,"We do this by querying the database internal metadata"),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Giving this PostgreSQL schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-SQL"},'CREATE SEQUENCE IF NOT EXISTS categories_id_seq;\n\nCREATE TABLE "categories" (\n    "id" int4 NOT NULL DEFAULT nextval(\'categories_id_seq\'::regclass),\n    "name" varchar(255) NOT NULL,\n    PRIMARY KEY ("id")\n);\n\nCREATE SEQUENCE IF NOT EXISTS pages_id_seq;\n\nCREATE TABLE "pages" (\n    "id" int4 NOT NULL DEFAULT nextval(\'pages_id_seq\'::regclass),\n    "title" varchar(255) NOT NULL,\n    "body_content" text,\n    "category_id" int4,\n    PRIMARY KEY ("id")\n);\n\nALTER TABLE "pages" ADD FOREIGN KEY ("category_id") REFERENCES "categories"("id");\n')),(0,a.kt)("p",null,"And running this code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"'use strict'\nconst { connect } = require('@platformatic/sql-mapper')\nconst { pino } = require('pino')\nconst pretty = require('pino-pretty')\nconst logger = pino(pretty())\n\nasync function main() {\n  const pgConnectionString = 'postgres://postgres:postgres@127.0.0.1/postgres'\n  const mapper = await connect({\n    connectionString: pgConnectionString,\n    log: logger,\n  })\n  const pageEntity = mapper.entities.page\n  console.log(pageEntity.relations)\n  await mapper.db.dispose()\n}\nmain()\n")),(0,a.kt)("p",null,"This will be the output "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[\n  {\n    constraint_catalog: 'postgres',\n    constraint_schema: 'public',\n    constraint_name: 'pages_category_id_fkey',\n    table_catalog: 'postgres',\n    table_schema: 'public',\n    table_name: 'pages',\n    constraint_type: 'FOREIGN KEY',\n    is_deferrable: 'NO',\n    initially_deferred: 'NO',\n    enforced: 'YES',\n    column_name: 'category_id',\n    ordinal_position: 1,\n    position_in_unique_constraint: 1,\n    foreign_table_name: 'categories',\n    foreign_column_name: 'id'\n  }\n]\n")),(0,a.kt)("p",null,"Since Platformatic DB runs against many database engines, that object might be different in MySQL or PostgreSQL or SQLite."),(0,a.kt)("p",null,"There are, although, these fields that are common to all databases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"column_name"),": the column that stores the foreign key"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foreign_table_name"),": the table hosting the related row"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"foreign_column_name"),": the column in foreign table that identifies the row")))}u.isMDXComponent=!0}}]);